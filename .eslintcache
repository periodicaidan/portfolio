[{"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/reportWebVitals.js":"1","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/App.js":"2","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/index.js":"3","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/pages/Home.jsx":"4","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/NavBar.jsx":"5","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/Hero/index.jsx":"6","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/Footer.jsx":"7","/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/ProjectShowcase.jsx":"8"},{"size":362,"mtime":1606252530655,"results":"9","hashOfConfig":"10"},{"size":89,"mtime":1606261853432,"results":"11","hashOfConfig":"10"},{"size":832,"mtime":1606261872461,"results":"12","hashOfConfig":"10"},{"size":360,"mtime":1606262460814,"results":"13","hashOfConfig":"10"},{"size":1680,"mtime":1606262642482,"results":"14","hashOfConfig":"10"},{"size":396,"mtime":1606262663834,"results":"15","hashOfConfig":"10"},{"size":609,"mtime":1606262658854,"results":"16","hashOfConfig":"10"},{"size":2056,"mtime":1606262452746,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w4ufqn",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/reportWebVitals.js",[],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/App.js",[],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/index.js",[],["36","37"],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/pages/Home.jsx",[],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/NavBar.jsx",["38"],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/Hero/index.jsx",[],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/Footer.jsx",[],"/home/periodicaidan/Desktop/Bootcamp/portfolio/src/components/ProjectShowcase.jsx",["39","40"],"import React from 'react';\nimport projectData from '../data/projects.json';\n\nexport default function ProjectShowcase(_props) {\n    return (\n        <main className=\"container\" style={{ width: '80%', margin: 'auto' }}>\n            <div className=\"columns\">\n                {projectData.map(project => <ProjectCard {...project} />)}\n            </div>\n        </main>\n    );\n}\n\nfunction ProjectCard(props) {\n    // This would be so much easier to explain in TSX but...\n    // The props can be one of these (all fields are strings unless otherwise annotated): \n    //      { title, lang, description, repo, demo }\n    //      { title, lang, description, githubHosted: boolean, owner, name }\n    \n    // First we get out the common fields: title, lang, and description\n    const { title, lang, description } = props;\n\n    // Now we get out the props for the 2nd type\n    const { githubHosted, name } = props;\n    const owner = props.owner ?? 'periodicaidan';\n\n    // Finally get the repo and demo, either by constructing them from the 2nd type\n    // or just by destructuring props again\n    const { repo, demo } = githubHosted \n        ? { \n            repo: `https://github.com/${owner}/${name}`, \n            demo: `https://${owner}.github.io/${name}` \n        }\n        : props;\n    \n    return (\n        <div className=\"column col-6 col-md-12 my-2\">\n            <div className=\"card\">\n                <div className=\"card-header\">\n                    <h4 className=\"card-title\">{title}</h4>\n                    <span className=\"card-subtitle text-gray text-uppercase\">{lang}</span>\n                </div>\n                <div className=\"divider\" />\n                <div className=\"card-body\">\n                    {description}\n                </div>\n                <div className=\"card-footer\">\n                    <a href={demo} target=\"_blank\" class=\"btn btn-success\" disabled={demo == null}>Demo</a>\n                    <a href={repo} target=\"_blank\" class=\"btn btn-secondart\">Repo</a>\n                </div>\n            </div>\n        </div>\n    );\n}",{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":22,"column":21,"nodeType":"47","endLine":22,"endColumn":58},{"ruleId":"48","severity":1,"message":"49","line":48,"column":36,"nodeType":"50","endLine":48,"endColumn":51},{"ruleId":"48","severity":1,"message":"49","line":49,"column":36,"nodeType":"50","endLine":49,"endColumn":51},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]